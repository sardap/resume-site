const wordMap: Record<string, string[]> = {
  welcome: ['welcome'],
  alphabetically: ['alphabelticly'],
  dyslexia: [
    'disleixa',
    'disxleixa',
    'dislexia',
    'dsyleixa',
    'disxliexa',
    'dislexixa',
    'dyslixila',
    'dysleixa'
  ],
  dyslexic: [
    'dislxisic',
    'disxliec',
    'disxleisc',
    'dislescic',
    'dislexsic',
    'dislexic',
    'dislxeic',
    'disxlesic',
    'dysxlisc',
    'disyleixc'
  ],
  your: ['your'],
  team: ['team'],
  poorest: ['poorest'],
  time: ['time'],
  to: ['to'],
  mode: ['mode'],
  the: ['the'],
  way: ['way'],
  this: ['this'],
  was: ['was'],
  written: ['written'],
  is: ['is'],
  i: ['i'],
  results: ['reulsts', 'results'],
  recorded: ['recoreded', 'recoreded'],
  audio: ['aduio', 'audio'],
  sat: ['sat'],
  down: ['down'],
  rewrote: ['reworte', 'rewrote'],
  it: ['it'],
  completely: ['completly', 'compeltely', 'completetly'],
  just: ['just'],
  by: ['by'],
  listening: ['listening'],
  word: ['word'],
  took: ['took'],
  facts: ['facts'],
  different: ['diffrent', 'differnet'],
  spelling: ['spelling'],
  variations: ['varations', 'varatations'],
  that: ['that'],
  did: ['did'],
  explanation: ['expliantion'],
  each: ['each'],
  iteration: ['iteration'],
  and: ['and'],
  page: ['page'],
  collection: ['collection'],
  of: ['of'],
  random: ['random'],
  ones: ['ones'],
  includes: ['includes'],
  destroy: ['destory'],
  destroys: ['destroyes', 'destories', 'distroies', 'distories'],
  times: ['times'],
  spelt: ['spelt'],
  write: ['write'],
  wrong: ['wrong'],
  will: ['will'],
  be: ['be'],
  very: ['very'],
  interesting: ['intersting', 'intersesting'],
  see: ['see'],
  what: ['what'],
  actually: ['actuclty', 'acuticly'],
  aloud: ['aloud'],
  looks: ['looks'],
  like: ['like'],
  so: ['so'],
  need: ['need'],
  a: ['a'],
  bunch: ['bunch'],
  words: ['words'],
  spell: ['spell'],
  usually: ['ususaly'],
  "don't": ["don't"],
  because: ['because'],
  avoid: ['aviod'],
  them: ['them'],
  "can't": ["can't"],
  good: ['good'],
  terminator: ['tomenetor', 'tormenetor'],
  one: ['one'],
  those: ['those'],
  you: ['you'],
  can: ['can'],
  never: ['never'],
  new: ['new'],
  neutral: ['neutal', 'nuetal'],
  creep: ['kreep', 'creep'],
  in: ['in'],
  dota: ['dota'],
  fun: ['fun'],
  gets: ['gets'],
  '2': ['2'],
  which: ['which'],
  when: ['when'],
  kill: ['kill'],
  gives: ['gives'],
  an: ['an'],
  aghanims: ['aghamaniuns', 'ahganamis'],
  shard: ['shard'],
  forget: ['forget'],
  my: ['my'],
  first: ['first'],
  concurrent: ['concurent', 'concucnet'],
  programming: ['programing'],
  class: ['clas'],
  always: ['always'],
  thought: ['thought'],
  there: ['there'],
  some: ['some'],
  magic: ['magic'],
  behind: ['behind'],
  make: ['make'],
  happen: ['happen'],
  across: ['across'],
  multiple: ['multiplie'],
  threads: ['threads'],
  but: ['but'],
  turns: ['turns'],
  out: ['out'],
  whole: ['whole'],
  about: ['about'],
  using: ['using'],
  locks: ['locks'],
  semaphores: ['sempahphoes', 'sempahores'],
  as: ['as'],
  soon: ['soon'],
  have: ['have'],
  two: ['two'],
  pieces: ['piecies'],
  code: ['code'],
  running: ['running'],
  parallel: ['parrel', 'parreal'],
  they: ['then'],
  interact: ['ineract'],
  with: ['with'],
  same: ['same'],
  thing: ['thing'],
  put: ['put'],
  lock: ['lock'],
  on: ['on'],
  only: ['only'],
  critical: ['critcal'],
  section: ['section', 'seciton'],
  then: ['then'],
  course: ['course'],
  work: ['work'],
  at: ['at'],
  atlassian: ['atlassain', 'atlasain', 'atalssain'],
  company: ['company', 'comapny'],
  prides: ['prides'],
  making: ['making'],
  products: ['products'],
  are: ['are'],
  impossible: ['imspossible', 'imposible', 'imsposoible'],
  we: ['we'],
  name: ['name'],
  itself: ['itself'],
  confluence: ['conflunce'],
  opsgenie: ['opsgiene'],
  mascot: ['mascot'],
  even: ['even'],
  called: ['called'],
  charlie: ['charile'],
  use: ['use'],
  tool: ['tool'],
  socrates: ['soctractes', 'socratices'],
  great: ['great'],
  instead: ['instend'],
  having: ['having'],
  short: ['short'],
  easy: ['easy'],
  long: ['long'],
  thanks: ['thanks'],
  for: ['for'],
  reading: ['reading'],
  obviously: ['obviusly'],
  rambly: ['ramblely'],
  "couldn't": ["couldn't"],
  rewrite: ['rewrite'],
  or: ['or'],
  would: ['would'],
  poison: ['posion'],
  well: ['well'],
  sentence: ['sentance', 'stenance'],
  beyond: ['byeond', 'byond'],
  remember: ['remeber'],
  extremely: ['exmtremaly'],
  advance: ['adnvancde'],
  extensive: ['exstenivinve'],
  spelled: ['spelled'],
  intro: ['intro'],
  wrote: ['wrote'],
  right: ['right'],
  read: ['read'],
  big: ['big'],
  list: ['list'],
  picks: ['picks'],
  versions: ['versions'],
  every: ['every'],
  load: ['load'],
  second: ['seoncd'],
  also: ['also'],
  refresh: ['refresh', 'refeseh'],
  seconds: ['seconds'],
  simulator: ['simulator'],
  not: ['not'],
  meant: ['meant'],
  transcribe: ['transscribpe', 'transcribe'],
  transcribing: ['transscribpeing', 'transcribing'],
  clear: ['clear'],
  love: ['love'],
  working: ['working'],
  preamble: ['preamble'],
  deprecation: ['depcration', 'deprecation'],
  probably: ['probably'],
  properly: ['properly', 'propelry'],
  escalation: ['esclation', 'exsclation', 'escolation', 'escalation'],
  happened: ['happend', 'hapend', 'happnd'],
  redundancy: ['redundency', 'redudency'],
  multiregion: ['multiregion'],
  product: ['product'],
  names: ['names']
}

export function dyslexiafiy_word(word: string): string {
  const punctuation = word.match(/^([.,!?]*)$/)
  if (punctuation) {
    return word
  }

  const numbers = word.match(/^([0-9]*)$/)
  if (numbers) {
    return word
  }

  const matches = word.match(/^([.,!?]*)(.*?)([.,!?]*)$/)

  // Check for null
  if (!matches) {
    console.log(`"Unknown word ${word}`)
    return word
  }

  const [_, startPunctuation, coreWord, endPunctuation] = matches

  let options = wordMap[coreWord.toLowerCase()] || [`unknown word: ${coreWord}`]
  let chosenOption = options[Math.floor(Math.random() * options.length)]

  if (coreWord[0] === coreWord[0].toUpperCase()) {
    chosenOption = chosenOption.charAt(0).toUpperCase() + chosenOption.slice(1)
  }

  return startPunctuation + chosenOption + endPunctuation
}

export function dyslexiafiy_block(sentence: string): string {
  const words = sentence.split(' ')
  const dyslexiafiyed_words = words.map(dyslexiafiy_word)
  return dyslexiafiyed_words.join(' ')
}
